# Cirrus CI configuration file using the matrix feature
# Read more under https://cirrus-ci.org/guide/writing-tasks/
# THIS FILE IS SUPPOSED TO BE AN EXAMPLE. MODIFY IT ACCORDING TO YOUR NEEDS!
---
# Default values to be merged into tasks:
auto_cancellation: false
env:
  PATH: ${HOME}/.local/bin:${PATH}
  # ^  add user paths
  # COVERALLS_REPO_TOKEN: ENCRYPTED[]
  # ^ You can add an encrypted token or use CirrusCI web interface to set the variable
  #   See discussion in: https://github.com/cirruslabs/cirrus-ci-docs/discussions/866
  PIP_CACHE: ${HOME}/.cache/pip
  LC_ALL: C.UTF-8
  LANG: C.UTF-8
  COVERAGE: NO
  CI_NAME: cirrus-ci
  CI_BRANCH: ${CIRRUS_BRANCH}
  CI_PULL_REQUEST: ${CIRRUS_PR}
  CI_BUILD_NUMBER: ${CIRRUS_BUILD_ID}
  CI_BUILD_URL: https://cirrus-ci.com/build/${CIRRUS_BUILD_ID}


# This template is used in most of the tasks
.regular_task_template: &REGULAR_TASK_TEMPLATE
  pip_cache: &pip-cache
    folder: $PIP_CACHE
  tox_install_script:
    - python -m pip install --upgrade pip setuptools tox
  prepare_script: &prepare
    # This script is also used in Windows, so the shell is not POSIX
    - git config --global user.email "you@example.com"
    - git config --global user.name "Your Name"
  clean_workspace_script:
    # Avoid information carried from one run to the other
    - rm -rf .coverage junit-*.xml .tox
  # The following scripts are also used in Windows, be aware the shell is not POSIX
  build_script: &build
    - python -m tox -e build  # Ensure PEP517-style build works
  test_script: &test
    - python -m tox -- -rfEx --durations 10 --color yes
    # ^  tox is better if invoked as a module on Windows/OSX


# Deep clone script for POSIX environments (required for setuptools-scm)
.clone_script: &clone |
  if [ -z "$CIRRUS_PR" ]; then
    git clone --recursive --branch=$CIRRUS_BRANCH https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
    git reset --hard $CIRRUS_CHANGE_IN_REPO
  else
    git clone --recursive https://x-access-token:${CIRRUS_REPO_CLONE_TOKEN}@github.com/${CIRRUS_REPO_FULL_NAME}.git $CIRRUS_WORKING_DIR
    git fetch origin pull/$CIRRUS_PR/head:pull/$CIRRUS_PR
    git reset --hard $CIRRUS_CHANGE_IN_REPO
  fi


# ---- Task definitions ----

linux_mac_task:
  # Use custom cloning since otherwise git tags are missing
  clone_script: *clone
  matrix:
    - name: test (Linux - 3.6)
      container: {image: "python:3.6-buster"}
    - name: test (Linux - 3.7)
      container: {image: "python:3.7-buster"}
    - name: test (Linux - 3.8)
      container: {image: "python:3.8-buster"}
    - name: test (Linux - 3.9)
      container: {image: "python:3.9-buster"}
    - name: test (Linux - Anaconda)
      container: {image: "continuumio/anaconda3:2021.05"}
      extra_install_script:
        - conda install -y -c conda-forge virtualenv build setuptools setuptools-scm pip tox
    - name: test (OS X)
      macos_instance: {image: "big-sur-xcode"}
      env:
        PYTHON_VERSION: 3.7
        # ^  update when the default version of python in homebrew changes
        PATH: "${HOME}/.local/bin:${HOME}/Library/Python/${PYTHON_VERSION}/bin:/usr/local/opt/python/libexec/bin:${PATH}"
        # ^  add user and homebrew paths
        PIP_CACHE: "${HOME}/Library/Caches/pip"
      brew_cache:
        folder: "$HOME/Library/Caches/Homebrew"
      install_script:
        - brew install python
        - brew cleanup
  <<: *REGULAR_TASK_TEMPLATE


# If you find some problems with long paths on Windows,
# please check the .cirrus.yml file of PyScaffold itself for some workarounds.
windows_task:
  name: test (Windows)
  tools_cache:
    folder: 'C:\tools'
    fingerprint_script:
      - ps: echo "$env:CIRRUS_OS - nuget v6.0.0 - git 2.34.1"
    populate_script:
      - ps: (mkdir 'C:\tools')
      # ^  use parentheses to suppress errors
      - ps: Invoke-WebRequest -OutFile 'C:\tools\nuget.exe' 'https://dist.nuget.org/win-x86-commandline/v6.0.0/nuget.exe'
      - ps: nuget install GitForWindows -Version 2.34.1 -NonInteractive -OutputDirectory C:\tools
  workaround_git_script:
    - git config --system core.longpaths true  # Fix for windows git checkout problems
  clone_script:
    # Use custom cloning since otherwise git tags are missing
    CMD.exe /C ECHO ON &
    IF NOT DEFINED CIRRUS_PR (
      git clone --recursive --branch=%CIRRUS_BRANCH% https://x-access-token:%CIRRUS_REPO_CLONE_TOKEN%@github.com/%CIRRUS_REPO_FULL_NAME%.git %CIRRUS_WORKING_DIR% &
      git reset --hard %CIRRUS_CHANGE_IN_REPO%
    ) ELSE (
      git clone --recursive https://x-access-token:%CIRRUS_REPO_CLONE_TOKEN%@github.com/%CIRRUS_REPO_FULL_NAME%.git %CIRRUS_WORKING_DIR% &
      git fetch origin pull/%CIRRUS_PR%/head:pull/%CIRRUS_PR% &
      git reset --hard %CIRRUS_CHANGE_IN_REPO%
    )
  windows_container:
    image: "python:3.8-windowsservercore"
    os_version: 2019
  env:
    # Single quotes are used bellow to escape Windows backslash and % (YAML restrictions).
    PYTHON_HOME: 'C:\Python'
    PYTHON_APPDATA: '%APPDATA%\Python\Python38'
    # ^  update when python version changes
    GIT_HOME: 'C:\tools\GitForWindows.2.34.1\tools'
    # ^ update when git version changes
    HOME: '%USERPROFILE%'
    USERNAME: ContainerAdministrator
    # ^  ensure USERNAME is set in Windows, so the getpass module doesn't raise exceptions
    PATH: '%HOME%\.local\bin\;%PYTHON_APPDATA%\Scripts\;%PYTHON_HOME%\;%PYTHON_HOME%\Scripts\;C:\tools\;%GIT_HOME%\cmd\;%PATH%'
    # ^  add user paths (if POSIX tools are needed you can try also adding %GIT_HOME\usr\bin\)
    PIP_CACHE: '%LocalAppData%\pip\Cache'
    PIP_TRUSTED_HOST: 'pypi.org pypi.python.org files.pythonhosted.org'
    PIP_CONFIG_FILE: '%AppData%\pip\pip.ini'
    COVERAGE: 'NO'
  pip_cache:
    folder: '%PIP_CACHE%'
  install_script:
    # Activate long file paths to avoid some errors
    - REG ADD "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
    # Set Windows encoding to UTF-8
    - REG ADD "HKEY_CURRENT_USER\Software\Microsoft\Command Processor" /v Autorun /t REG_SZ /d "@chcp 65001>nul" /f
    - python -m ensurepip
    - python -m pip install --upgrade --user pip setuptools certifi tox
  prepare_script: *prepare
  clean_workspace_script:
    # Avoid information carried from one run to the other
    # CMD is not capable of globbing, so we have to use PowerShell
    - ps: (rm -Recurse -Force -ErrorAction SilentlyContinue .tox,junit-*.xml)
  build_script: *build
  test_script: *test


coverage_task:
  name: coverage (Linux - 3.6)
  clone_script: *clone
  container: {image: "python:3.6-buster"}
  env:
    COVERAGE: yes
    PRE_COMMIT_HOME: ${HOME}/.cache/pre-commit
  depends_on:
    - test (Linux - 3.6)
    - test (Linux - 3.7)
    - test (Linux - 3.8)
    - test (Linux - Anaconda)
    - test (OS X)
  pip_install_script:
    pip install --user --upgrade coverage coveralls pre-commit
  precommit_script:
    - pre-commit install
    - pre-commit run --all-files
  <<: *REGULAR_TASK_TEMPLATE
  coverage_script:
    - coveralls
  pre_commit_cache: &pre-commit-cache
    folder: $PRE_COMMIT_HOME
    fingerprint_script:
      - echo $CIRRUS_OS
      - python --version
      - pre-commit --version
      - cat .pre-commit-config.yaml
