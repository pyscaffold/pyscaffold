[metadata]
name = PyScaffold
description = Template tool for putting up the scaffold of a Python project
author = Florian Wilhelm
author_email = Florian.Wilhelm@gmail.com
license = MIT
url = https://github.com/pyscaffold/pyscaffold/
project_urls =
    Documentation = https://pyscaffold.org/
    Source = https://github.com/pyscaffold/pyscaffold/
    Tracker = https://github.com/pyscaffold/pyscaffold/issues
    Changelog = https://pyscaffold.org/en/latest/changelog.html
    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
    Download = https://pypi.org/project/PyScaffold/#files
    Twitter = https://twitter.com/PyScaffold
long_description = file: README.rst
long_description_content_type = text/x-rst; charset=UTF-8
platforms = any
classifiers =
    Development Status :: 5 - Production/Stable
    Topic :: Utilities
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Environment :: Console
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: POSIX :: Linux
    Operating System :: Unix
    Operating System :: MacOS
    Operating System :: Microsoft :: Windows

[options]
zip_safe = False
packages = find_namespace:
python_requires = >=3.6
include_package_data = True
package_dir =
    =src
install_requires =
    importlib-metadata; python_version<"3.8"
    appdirs>=1.4.4,<2
    configupdater>=2.0,<3
    setuptools>=46.1.0
    setuptools_scm>=5
    tomlkit>=0.7.0,<2
    packaging>=20.7

# packaging is versioned by year, not SemVer

# Notes about setuptools versions:
# - 40.1: required for `find_namespace`
# - 45: required for `setuptools_scm` v6
# However we specify a higher version so we encourage users to update the
# version they have installed...

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, like:
all =
    pyscaffoldext-markdown>=0.4
    pyscaffoldext-custom-extension>=0.6
    pyscaffoldext-dsproject>=0.5
    pyscaffoldext-django>=0.1.1
    pyscaffoldext-cookiecutter>=0.1
    pyscaffoldext-travis>=0.3
    virtualenv
    pre-commit
md =
    pyscaffoldext-markdown>=0.4
ds =
    pyscaffoldext-dsproject>=0.5
# Add here test dependencies (used by tox)
testing =
    setuptools
    tomlkit     # as dependency in `-e fast`
    certifi     # tries to prevent certificate problems on windows
    tox         # system tests use tox inside tox
    build       # system tests use it to build projects
    pre-commit  # system tests run pre-commit
    sphinx      # system tests build docs
    flake8      # system tests run flake8
    virtualenv  # virtualenv as dependency for the venv extension in `-e fast`
    pytest
    pytest-cov
    pytest-shutil
    pytest-virtualenv
    pytest-fixture-config
    pytest-xdist
    # We keep pytest-xdist in the test dependencies, so the developer can
    # easily opt-in for distributed tests by adding, for example, the `-n 15`
    # arguments in the command-line.

[options.entry_points]
console_scripts =
    putup = pyscaffold.cli:run
pyscaffold.cli =
    config = pyscaffold.extensions.config:Config
    interactive = pyscaffold.extensions.interactive:Interactive
    venv = pyscaffold.extensions.venv:Venv
    namespace = pyscaffold.extensions.namespace:Namespace
    no_skeleton = pyscaffold.extensions.no_skeleton:NoSkeleton
    pre_commit = pyscaffold.extensions.pre_commit:PreCommit
    no_tox = pyscaffold.extensions.no_tox:NoTox
    gitlab = pyscaffold.extensions.gitlab_ci:GitLab
    cirrus = pyscaffold.extensions.cirrus:Cirrus
    no_pyproject = pyscaffold.extensions.no_pyproject:NoPyProject

[tool:pytest]
# Options for pytest:
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junit-xml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov pyscaffold --cov-config .coveragerc --cov-report term-missing
    --verbose
#    In order to use xdist, the developer can add, for example, the following
#    arguments:
#    --dist=load --numprocesses=auto
norecursedirs =
    dist
    build
    .tox
testpaths = tests
markers =
    only: for debugging purposes, a single, failing, test can be required to run
    slow: mark tests as slow (deselect with '-m "not slow"')
    system: mark system tests
    original_logger: do not isolate logger in specific tests
    no_fake_config_dir: avoid the autofixture fake_config_dir to take effect
    requires_src: tests that require the raw source of PyScaffold and assume our default CI environment
log_level = DEBUG
log_cli = True
log_cli_level = CRITICAL
junit_family = xunit2

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
# black compatibility
max_line_length = 88
# E203 and W503 have edge cases handled by black
extend_ignore = E203, W503
exclude =
    src/pyscaffold/contrib
    .tox
    build
    dist
    .eggs
    docs/conf.py

[mypy]
ignore_missing_imports = True
pretty = True
show_error_codes = True
show_error_context = True
show_traceback = True
