[metadata]
name = PyScaffold
summary = Template tool for putting up the scaffold of a Python project
author = Florian Wilhelm
author-email = Florian.Wilhelm@gmail.com
license = new BSD
home-page = http://pyscaffold.readthedocs.org/
description-file = README.rst
classifier =
    Development Status :: 5 - Production/Stable
    Topic :: Utilities
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5
    Environment :: Console
    Intended Audience :: Developers
    License :: OSI Approved :: BSD License
    Operating System :: POSIX :: Linux
    Operating System :: Unix
    Operating System :: MacOS
    Operating System :: Microsoft :: Windows

[entry_points]
# Add here console scripts like:
console_scripts =
    putup = pyscaffold.cli:run
# as well as other entry_points.
distutils.setup_keywords =
    use_pyscaffold = pyscaffold.integration:pyscaffold_keyword
setuptools.file_finders =
    setuptools_scm=pyscaffold.contrib:scm_find_files
setuptools_scm.parse_scm =
    .hg = pyscaffold.contrib:scm_parse_hg
    .git = pyscaffold.contrib:scm_parse_git
    .hg_archival.txt = pyscaffold.contrib:scm_parse_archival
    PKG-INFO = pyscaffold.contrib:scm_parse_pkginfo
setuptools_scm.files_command =
    .hg = pyscaffold.contrib:SCM_HG_FILES_COMMAND
    .git = pyscaffold.contrib:SCM_GIT_FILES_COMMAND
setuptools_scm.version_scheme =
    guess-next-dev = pyscaffold.contrib:scm_guess_next_dev_version
    post-release = pyscaffold.contrib:scm_postrelease_version
setuptools_scm.local_scheme =
    node-and-date = pyscaffold.contrib:scm_get_local_node_and_date
    dirty-tag = pyscaffold.contrib:scm_get_local_dirty_tag
egg_info.writers =
    pbr.json = pyscaffold.contrib:write_pbr_json

[files]
# Add here 'data_files', 'packages' or 'namespace_packages'.
# Additional data files are defined as key value pairs of source and target:
packages =
    pyscaffold
data_files =
    share/pyscaffold/docs = docs/*

[extras]
# Add here additional requirements for extra features, like:
# PDF =
#    ReportLab>=1.2
#    RXP
ALL =
    django
    cookiecutter

[test]
# py.test options when running `python setup.py test`
addopts = tests --verbose

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    -p coverage
    --cov pyscaffold --cov-report term-missing
    --verbose

[aliases]
docs = build_sphinx

[bdist_wheel]
universal = 1

[build_sphinx]
# Options for Sphinx build
source_dir = docs
build_dir = docs/_build

[pbr]
# Let pbr run sphinx-apidoc
autodoc_tree_index_modules = True
# autodoc_tree_excludes = ...
# Let pbr itself generate the apidoc
# autodoc_index_modules = True
# autodoc_exclude_modules = ...
# Convert warnings to errors
# warnerrors = True

[devpi:upload]
# Options for the devpi: PyPI serer and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel
