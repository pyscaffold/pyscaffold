[metadata]
name = PyScaffold
description = Template tool for putting up the scaffold of a Python project
author = Florian Wilhelm
author-email = Florian.Wilhelm@gmail.com
license = MIT
url = https://github.com/pyscaffold/pyscaffold/
project-urls =
    Documentation = https://pyscaffold.org/
    Twitter = https://twitter.com/PyScaffold
    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
long-description = file: README.rst
long-description-content-type = text/x-rst; charset=UTF-8
platforms = any
classifiers =
    Development Status :: 5 - Production/Stable
    Topic :: Utilities
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Environment :: Console
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: POSIX :: Linux
    Operating System :: Unix
    Operating System :: MacOS
    Operating System :: Microsoft :: Windows

[options]
zip_safe = False
packages = find:
python_requires = >=3.4
include_package_data = True
package_dir =
    =src
install_requires = setuptools>=38.3

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, like:
all =
    django
    cookiecutter
    pyscaffoldext-markdown
    pyscaffoldext-pyproject
md =
    pyscaffoldext-markdown
# Add here test dependencies (used by tox and pytest-runner)
testing =
    sphinx  # required for system tests
    flake8  # required for system tests
    pytest<4.0.0
    pytest-cov
    pytest-virtualenv
    pytest-xdist
    virtualenv
    # We keep pytest-xdist in the test dependencies, so the developer can
    # easily opt-in for distributed tests by adding, for example, the `-n 15`
    # arguments in the command-line.

[options.entry_points]
distutils.setup_keywords =
    use_pyscaffold = pyscaffold.integration:pyscaffold_keyword
console_scripts =
    putup = pyscaffold.cli:run
pyscaffold.cli =
    namespace = pyscaffold.extensions.namespace:Namespace
    travis = pyscaffold.extensions.travis:Travis
    pre_commit = pyscaffold.extensions.pre_commit:PreCommit
    tox = pyscaffold.extensions.tox:Tox
    gitlab = pyscaffold.extensions.gitlab_ci:GitLab
    django = pyscaffold.extensions.django:Django
    cookiecutter = pyscaffold.extensions.cookiecutter:Cookiecutter
    no_skeleton = pyscaffold.extensions.no_skeleton:NoSkeleton
setuptools.file_finders =
    setuptools_scm = pyscaffold.contrib.setuptools_scm.integration:find_files
setuptools_scm.parse_scm =
    .hg = pyscaffold.contrib.setuptools_scm.hg:parse
    .git = pyscaffold.contrib.setuptools_scm.git:parse
setuptools_scm.parse_scm_fallback =
    .hg_archival.txt = pyscaffold.contrib.setuptools_scm.hg:parse_archival
    PKG-INFO = pyscaffold.contrib.setuptools_scm.hacks:parse_pkginfo
    pip-egg-info = pyscaffold.contrib.setuptools_scm.hacks:parse_pip_egg_info
setuptools_scm.files_command =
    .hg = pyscaffold.contrib.setuptools_scm.file_finder_hg:hg_find_files
    .git = pyscaffold.contrib.setuptools_scm.file_finder_git:git_find_files
setuptools_scm.version_scheme =
    guess-next-dev = pyscaffold.contrib.setuptools_scm.version:guess_next_dev_version
    post-release = pyscaffold.contrib.setuptools_scm.version:postrelease_version
    python-simplified-semver = setuptools_scm.version:simplified_semver_version
setuptools_scm.local_scheme =
    node-and-date = pyscaffold.contrib.setuptools_scm.version:get_local_node_and_date
    node-and-timestamp = pyscaffold.contrib.setuptools_scm.version:get_local_node_and_timestamp
    dirty-tag = pyscaffold.contrib.setuptools_scm.version:get_local_dirty_tag

[test]
# py.test options when running `python setup.py test`
addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    --cov pyscaffold --cov-config .coveragerc --cov-report term-missing
    --verbose
#    In order to use xdist, the developer can add, for example, the following
#    arguments:
#    --dist=load --numprocesses=auto
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[aliases]
dists = sdist bdist_wheel

[build_sphinx]
# Options for Sphinx build
source_dir = docs
build_dir = docs/_build

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats =
    sdist
    bdist_wheel

[flake8]
exclude =
    src/pyscaffold/contrib
    .tox
    build
    dist
    .eggs
    docs/conf.py
