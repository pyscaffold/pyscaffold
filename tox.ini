# For distributed tests, call tox with `-n NUMBER` arguments
# Use `setup.cfg` as single-source of truth for dependency specification

[tox]
minversion = 3.15
envlist = default
isolated_build = True


[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    USER
    USERNAME
    COVERAGE
    PIP_CACHE
    PIP_TRUSTED_HOST
    PRE_COMMIT_HOME
    REQUESTS_CA_BUNDLE
    CURL_CA_BUNDLE
    USING_CONDA
extras =
    # TODO: Uncomment `all` once all the extensions are updated
    #       to the new version of pyscaffold
    # all
    testing
commands =
    default: pytest -k "not system" {posargs}
    system: pytest -k system {posargs}
    all: pytest -vv {posargs}


[testenv:fast]
description = Try to run a minimal subset of tests, as fast as possible
usedevelop = True
setenv = {[testenv]setenv}
passenv = {[testenv]passenv}
extras = {[testenv]extras}
commands =
    pytest -x -n auto -m "not slow and not system" {posargs}


[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
# NOTE: build is still experimental, please refer to the links for updates/issues
# https://setuptools.readthedocs.io/en/latest/build_meta.html#how-to-use-it
# https://github.com/pypa/pep517/issues/91
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
commands =
    clean: python -c 'from shutil import rmtree; rmtree("build", True); rmtree("dist", True)'
    build: python -m build .
# By default `build` produces wheels, you can also explicitly use the flags `--sdist` and `--wheel`


[testenv:{docs,doctests,linkcheck}]
description =
    docs: Invoke sphinx-build to build the docs
    doctests: Invoke sphinx-build to run doctests
    linkcheck: Check for broken links in the documentation
setenv =
    DOCSDIR = {toxinidir}/docs
    BUILDDIR = {toxinidir}/docs/_build
    docs: BUILD = html
    doctests: BUILD = doctest
    linkcheck: BUILD = linkcheck
deps =
    -r {toxinidir}/docs/requirements.txt
    # ^  requirements.txt shared with Read The Docs
commands =
    sphinx-build --color -b {env:BUILD} -d "{env:BUILDDIR}/doctrees" "{env:DOCSDIR}" "{env:BUILDDIR}/{env:BUILD}" {posargs}


[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository testpypi} dist/*


[testenv:typecheck]
description = invoke mypy to typecheck the source code
changedir = {toxinidir}
passenv =
    TERM
    # ^ ensure colors
deps =
    mypy
commands =
    python -m mypy {posargs:src}
